#include <gtest/gtest.h>
#include <random>
extern "C" {
    #include "euclidean.h"
    #include "listdouble.h"
}

TEST(EuclidianTests, DistanceParallelTest)
{
    double vector_one[55] = {84.000000, 81.000000, 83.000000, 81.000000, 81.000000, 82.000000, 84.000000, 80.000000, 83.000000, 79.000000, 84.000000, 83.000000, 81.000000, 84.000000, 80.000000, 86.000000, 83.000000, 86.000000, 83.000000, 84.000000, 83.000000, 84.000000, 82.000000, 79.000000, 80.000000, 78.000000, 78.000000, 68.000000, 106.000000, -29.000000, -70.000000, -81.000000, -84.000000, -87.000000, -87.000000, -83.000000, -86.000000, -86.000000, -88.000000, -83.000000, -87.000000, -85.000000, -85.000000, -87.000000, -84.000000, -85.000000, -82.000000, -86.000000, -84.000000, -86.000000, -82.000000, -84.000000, -85.000000, -87.000000, -84.000000};
    double vector_two[55] = {66.000000, 69.000000, 70.000000, 68.000000, 67.000000, 68.000000, 66.000000, 70.000000, 67.000000, 66.000000, 67.000000, 64.000000, 69.000000, 66.000000, 67.000000, 66.000000, 64.000000, 68.000000, 65.000000, 66.000000, 65.000000, 63.000000, 65.000000, 64.000000, 62.000000, 62.000000, 59.000000, 64.000000, 62.000000, 64.000000, 60.000000, 62.000000, 61.000000, 65.000000, 64.000000, 64.000000, 61.000000, 64.000000, 64.000000, 65.000000, 60.000000, 66.000000, 59.000000, 66.000000, 61.000000, 63.000000, 59.000000, 59.000000, 58.000000, 56.000000, 58.000000, 71.000000, -42.000000, -91.000000, -104.000000};

    for (int i = 0; i < 5000; ++i)
    {
        double result_parallel = distance_parallel(vector_one, vector_two, 55);
        double result_sinc = distance(vector_one, vector_two, 55);

        EXPECT_NEAR(result_parallel, result_sinc, 0.2);
    }
}

TEST(EuclidianTests, DistanceParallelStressTest)
{
    double vector_one[200] = {79.000000, 84.000000, 81.000000, 83.000000, 81.000000, 81.000000, 82.000000, 84.000000, 80.000000, 83.000000, 79.000000, 84.000000, 83.000000, 81.000000, 84.000000, 80.000000, 86.000000, 83.000000, 86.000000, 83.000000, 84.000000, 83.000000, 84.000000, 82.000000, 79.000000, 80.000000, 78.000000, 78.000000, 68.000000, 106.000000, -29.000000, -70.000000, -81.000000, -84.000000, -87.000000, -87.000000, -83.000000, -86.000000, -86.000000, -88.000000, -83.000000, -87.000000, -85.000000, -85.000000, -87.000000, -84.000000, -85.000000, -82.000000, -86.000000, -84.000000, -86.000000, -82.000000, -84.000000, -85.000000, -87.000000, -84.000000, -84.000000, -84.000000, -84.000000, -87.000000, -83.000000, -84.000000, -82.000000, -85.000000, -82.000000, -84.000000, -78.000000, -81.000000, -81.000000, -82.000000, -81.000000, -80.000000, -79.000000, -80.000000, -81.000000, -81.000000, -79.000000, -78.000000, -80.000000, -78.000000, -82.000000, -74.000000, -79.000000, -76.000000, -78.000000, -77.000000, -76.000000, -74.000000, -75.000000, -72.000000, -73.000000, -66.000000, -64.000000, -95.000000, 41.000000, 78.000000, 86.000000, 90.000000, 90.000000, 91.000000, 90.000000, 89.000000, 91.000000, 88.000000, 86.000000, 86.000000, 85.000000, 88.000000, 87.000000, 84.000000, 85.000000, 79.000000, 86.000000, 80.000000, 83.000000, 78.000000, 79.000000, 78.000000, 79.000000, 77.000000, 79.000000, 76.000000, 78.000000, 77.000000, 79.000000, 77.000000, 78.000000, 73.000000, 82.000000, 76.000000, 76.000000, 76.000000, 74.000000, 77.000000, 78.000000, 77.000000, 78.000000, 75.000000, 77.000000, 77.000000, 78.000000, 77.000000, 76.000000, 74.000000, 79.000000, 76.000000, 76.000000, 76.000000, 74.000000, 76.000000, 77.000000, 75.000000, 73.000000, 70.000000, 71.000000, 68.000000, 75.000000, 79.000000, -34.000000, -85.000000, -84.000000, -93.000000, -90.000000, -92.000000, -91.000000, -91.000000, -88.000000, -91.000000, -92.000000, -93.000000, -91.000000, -91.000000, -90.000000, -93.000000, -89.000000, -95.000000, -87.000000, -91.000000, -90.000000, -91.000000, -90.000000, -91.000000, -88.000000, -90.000000, -89.000000, -90.000000, -89.000000, -88.000000, -88.000000, -89.000000, -87.000000, -89.000000, -83.000000, -86.000000, -85.000000, -85.000000, -85.000000, -83.000000, -84.000000, -82.000000};
    double vector_two[200] = {10.000000, 8.000000, 20.000000, 20.000000, -8.000000, 128.000000, 165.000000, 183.000000, 183.000000, 187.000000, 188.000000, 192.000000, 196.000000, 199.000000, 201.000000, 204.000000, 205.000000, 210.000000, 213.000000, 214.000000, 220.000000, 217.000000, 229.000000, 225.000000, 231.000000, 233.000000, 235.000000, 241.000000, 243.000000, 247.000000, 250.000000, 251.000000, 257.000000, 259.000000, 262.000000, 265.000000, 264.000000, 274.000000, 273.000000, 278.000000, 279.000000, 283.000000, 287.000000, 293.000000, 295.000000, 300.000000, 305.000000, 307.000000, 313.000000, 315.000000, 320.000000, 321.000000, 327.000000, 332.000000, 336.000000, 338.000000, 344.000000, 342.000000, 355.000000, 355.000000, 361.000000, 363.000000, 367.000000, 373.000000, 374.000000, 378.000000, 379.000000, 386.000000, 396.000000, 309.000000, 252.000000, 248.000000, 245.000000, 255.000000, 257.000000, 263.000000, 265.000000, 272.000000, 274.000000, 285.000000, 286.000000, 293.000000, 296.000000, 303.000000, 309.000000, 315.000000, 319.000000, 325.000000, 327.000000, 339.000000, 341.000000, 350.000000, 352.000000, 359.000000, 361.000000, 374.000000, 375.000000, 382.000000, 386.000000, 392.000000, 398.000000, 405.000000, 410.000000, 415.000000, 422.000000, 423.000000, 435.000000, 439.000000, 448.000000, 454.000000, 459.000000, 465.000000, 474.000000, 481.000000, 485.000000, 493.000000, 500.000000, 505.000000, 514.000000, 522.000000, 527.000000, 533.000000, 540.000000, 542.000000, 551.000000, 555.000000, 559.000000, 563.000000, 562.000000, 563.000000, 559.000000, 600.000000, 499.000000, 170.000000, 74.000000, 48.000000, 39.000000, 31.000000, 29.000000, 24.000000, 25.000000, 18.000000, 22.000000, 15.000000, 13.000000, 5.000000, 2.000000, 2.000000, 1.000000, -1.000000, -3.000000, -8.000000, -6.000000, -10.000000, -11.000000, -17.000000, -16.000000, -26.000000, -21.000000, -29.000000, -32.000000, -38.000000, -39.000000, -43.000000, -48.000000, -52.000000, -57.000000, -58.000000, -63.000000, -63.000000, -70.000000, -72.000000, -76.000000, -75.000000, -80.000000, -82.000000, -87.000000, -88.000000, -92.000000, -92.000000, -96.000000, -101.000000, -101.000000, -107.000000, -106.000000, -111.000000, -111.000000, -117.000000, -118.000000, -124.000000, -125.000000, -132.000000, -132.000000, -137.000000, -141.000000, -144.000000, -152.000000, -151.000000, -156.000000, -158.000000};

    for (int i = 0; i < 5000; ++i)
    {
        double result = distance_parallel(vector_one, vector_two, 200);

        EXPECT_NEAR(4091.975073, result, 0.1);
    }
}

TEST(EuclidianTests, DistanceStressTest)
{
    double vector_one[200] = {79.000000, 84.000000, 81.000000, 83.000000, 81.000000, 81.000000, 82.000000, 84.000000, 80.000000, 83.000000, 79.000000, 84.000000, 83.000000, 81.000000, 84.000000, 80.000000, 86.000000, 83.000000, 86.000000, 83.000000, 84.000000, 83.000000, 84.000000, 82.000000, 79.000000, 80.000000, 78.000000, 78.000000, 68.000000, 106.000000, -29.000000, -70.000000, -81.000000, -84.000000, -87.000000, -87.000000, -83.000000, -86.000000, -86.000000, -88.000000, -83.000000, -87.000000, -85.000000, -85.000000, -87.000000, -84.000000, -85.000000, -82.000000, -86.000000, -84.000000, -86.000000, -82.000000, -84.000000, -85.000000, -87.000000, -84.000000, -84.000000, -84.000000, -84.000000, -87.000000, -83.000000, -84.000000, -82.000000, -85.000000, -82.000000, -84.000000, -78.000000, -81.000000, -81.000000, -82.000000, -81.000000, -80.000000, -79.000000, -80.000000, -81.000000, -81.000000, -79.000000, -78.000000, -80.000000, -78.000000, -82.000000, -74.000000, -79.000000, -76.000000, -78.000000, -77.000000, -76.000000, -74.000000, -75.000000, -72.000000, -73.000000, -66.000000, -64.000000, -95.000000, 41.000000, 78.000000, 86.000000, 90.000000, 90.000000, 91.000000, 90.000000, 89.000000, 91.000000, 88.000000, 86.000000, 86.000000, 85.000000, 88.000000, 87.000000, 84.000000, 85.000000, 79.000000, 86.000000, 80.000000, 83.000000, 78.000000, 79.000000, 78.000000, 79.000000, 77.000000, 79.000000, 76.000000, 78.000000, 77.000000, 79.000000, 77.000000, 78.000000, 73.000000, 82.000000, 76.000000, 76.000000, 76.000000, 74.000000, 77.000000, 78.000000, 77.000000, 78.000000, 75.000000, 77.000000, 77.000000, 78.000000, 77.000000, 76.000000, 74.000000, 79.000000, 76.000000, 76.000000, 76.000000, 74.000000, 76.000000, 77.000000, 75.000000, 73.000000, 70.000000, 71.000000, 68.000000, 75.000000, 79.000000, -34.000000, -85.000000, -84.000000, -93.000000, -90.000000, -92.000000, -91.000000, -91.000000, -88.000000, -91.000000, -92.000000, -93.000000, -91.000000, -91.000000, -90.000000, -93.000000, -89.000000, -95.000000, -87.000000, -91.000000, -90.000000, -91.000000, -90.000000, -91.000000, -88.000000, -90.000000, -89.000000, -90.000000, -89.000000, -88.000000, -88.000000, -89.000000, -87.000000, -89.000000, -83.000000, -86.000000, -85.000000, -85.000000, -85.000000, -83.000000, -84.000000, -82.000000};
    double vector_two[200] = {10.000000, 8.000000, 20.000000, 20.000000, -8.000000, 128.000000, 165.000000, 183.000000, 183.000000, 187.000000, 188.000000, 192.000000, 196.000000, 199.000000, 201.000000, 204.000000, 205.000000, 210.000000, 213.000000, 214.000000, 220.000000, 217.000000, 229.000000, 225.000000, 231.000000, 233.000000, 235.000000, 241.000000, 243.000000, 247.000000, 250.000000, 251.000000, 257.000000, 259.000000, 262.000000, 265.000000, 264.000000, 274.000000, 273.000000, 278.000000, 279.000000, 283.000000, 287.000000, 293.000000, 295.000000, 300.000000, 305.000000, 307.000000, 313.000000, 315.000000, 320.000000, 321.000000, 327.000000, 332.000000, 336.000000, 338.000000, 344.000000, 342.000000, 355.000000, 355.000000, 361.000000, 363.000000, 367.000000, 373.000000, 374.000000, 378.000000, 379.000000, 386.000000, 396.000000, 309.000000, 252.000000, 248.000000, 245.000000, 255.000000, 257.000000, 263.000000, 265.000000, 272.000000, 274.000000, 285.000000, 286.000000, 293.000000, 296.000000, 303.000000, 309.000000, 315.000000, 319.000000, 325.000000, 327.000000, 339.000000, 341.000000, 350.000000, 352.000000, 359.000000, 361.000000, 374.000000, 375.000000, 382.000000, 386.000000, 392.000000, 398.000000, 405.000000, 410.000000, 415.000000, 422.000000, 423.000000, 435.000000, 439.000000, 448.000000, 454.000000, 459.000000, 465.000000, 474.000000, 481.000000, 485.000000, 493.000000, 500.000000, 505.000000, 514.000000, 522.000000, 527.000000, 533.000000, 540.000000, 542.000000, 551.000000, 555.000000, 559.000000, 563.000000, 562.000000, 563.000000, 559.000000, 600.000000, 499.000000, 170.000000, 74.000000, 48.000000, 39.000000, 31.000000, 29.000000, 24.000000, 25.000000, 18.000000, 22.000000, 15.000000, 13.000000, 5.000000, 2.000000, 2.000000, 1.000000, -1.000000, -3.000000, -8.000000, -6.000000, -10.000000, -11.000000, -17.000000, -16.000000, -26.000000, -21.000000, -29.000000, -32.000000, -38.000000, -39.000000, -43.000000, -48.000000, -52.000000, -57.000000, -58.000000, -63.000000, -63.000000, -70.000000, -72.000000, -76.000000, -75.000000, -80.000000, -82.000000, -87.000000, -88.000000, -92.000000, -92.000000, -96.000000, -101.000000, -101.000000, -107.000000, -106.000000, -111.000000, -111.000000, -117.000000, -118.000000, -124.000000, -125.000000, -132.000000, -132.000000, -137.000000, -141.000000, -144.000000, -152.000000, -151.000000, -156.000000, -158.000000};

    for (int i = 0; i < 5000; ++i)
    {
        double result = distance(vector_one, vector_two, 200);

        EXPECT_NEAR(4091.975073, result, 0.1);
    }
}